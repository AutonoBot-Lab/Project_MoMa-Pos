from utils_EdgeBuilder import EdgeBuilder
from utils_NodeBuilder import NodeBuilder
from utils_Graph import GraphBuilder
from utils_SortSimilarity import Sort_Similarity
import networkx as nx
import numpy as np
from collections import defaultdict
from node2vec import Node2Vec
# 这一部分是准备输入G中的edges和nodes
object_stacking = [('Table', [1, 1, 0], [0.44899999999999973, 0.17399999999999982, -0.20450000000000002, 1.5510000000000002, 1.826, 0.9085000000000001], True), ('Chair_A', [1, 3, 0], [0.7657332263439893, 2.767163792580366, -0.002408008079102575, 1.23426673565805, 3.283865531206131, 1.010342696726322], True), ('Chair_B', [2.5, 1, 0], [2.267163792580366, 0.7657332643419501, -0.002408008079102575, 2.783865531206131, 1.2342667736560107, 1.010342696726322], True), ('Chair_C', [1, -1, 0], [0.7657332643419501, -1.283865531206131, -0.002408008079102575, 1.2342667736560107, -0.767163792580366, 1.010342696726322], True), ('Convex', [4, 2, 1.477], [3.645, 0.331000021457672, 0.0020000000000001683, 4.42, 3.2040000476837154, 2.242000024318695], True), ('Fridge', [4.1, 5.42, 1.055], [3.688419186234474, 5.094949591517448, 0.015757085800170517, 4.409681093573571, 5.74232460463047, 2.049774296760559], True), ('elementF', [4.1, 4.55, 0.55], [3.727694785714149, 3.6431662828922264, -0.006369325399398829, 4.464189401149749, 4.361847497403621, 0.9117463140487672], True), ('elementG', [4.1, 5.25, 0.55], [3.727694785714149, 4.343166282892227, -0.006369325399398829, 4.464189401149749, 5.0618474974036225, 0.9117463140487672], True), ('Dishwasher', [3.85, 3.2, 0.35], [3.7081110202760694, 2.7691082409620287, -0.050063745021820094, 4.398934257864952, 3.6428384968042375, 0.7838857301473618], True), ('Microwave', [4.0, 2.9, 1.1], [3.73802099442482, 2.4950634858608245, 0.9109770051240921, 4.241272992730141, 3.2712760128974914, 1.3112554975748063], False), ('Peach', [0.8, 0.5, 0.9], [0.7785166998654605, 0.4558094003498554, 0.8962167999909725, 0.8534119019955397, 0.5317979990243912, 0.9667329004704952], False), ('Bowl_Target', [0.7, 1.0, 0.97], [0.6078934022486209, 0.9083344997167586, 0.9364419998675585, 0.792105499535799, 1.091943799585104, 1.003664699152112], False), ('Banana', [0.6, 0.6, 0.9], [0.5028280194401741, 0.5752350192070007, 0.8796300291568041, 0.7035250012278557, 0.6538389903008938, 0.9203699708431959], False), ('Bread', [0.7, 0.7, 0.9], [0.6477268013656139, 0.6473031986057758, 0.898233899889281, 0.7474064980149269, 0.753622699946165, 0.9549264025390148], False), ('Lemon', [0.8, 0.8, 0.9], [0.7558939994573594, 0.7897050000987947, 0.8965319999870844, 0.8229480000883341, 0.854426999270916, 0.9561289987266064], False), ('Book_A', [3.9, 4.6, 1.0], [3.7632880063056944, 4.5969999999999995, 0.9129170016646385, 4.036708000183105, 4.644999999433756, 1.0874269990921022], False), ('Book_B', [3.9, 4.9, 1.0], [3.7632880063056944, 4.855000000566244, 0.912573000907898, 4.036708000183105, 4.9030000000000005, 1.0870829983353616], False), ('Book_C', [4.2, 0.8, 1.0], [4.063288006305695, 0.7550000005662442, 0.912573000907898, 4.336708000183106, 0.803, 1.0870829983353616], False), ('Book_D', [4.2, 0.7, 1.0], [4.063288006305695, 0.6550000005662441, 0.912573000907898, 4.336708000183106, 0.703, 1.0870829983353616], False)]
object_details = [('Table', [1, 1, 0], [1.1020000000000003, 1.6520000000000001, 1.113], True), ('Chair_A', [1, 3, 0], [0.46853350931406057, 0.5167017386257653, 1.0127507048054247], True), ('Chair_B', [2.5, 1, 0], [0.5167017386257653, 0.46853350931406057, 1.0127507048054247], True), ('Chair_C', [1, -1, 0], [0.46853350931406057, 0.5167017386257649, 1.0127507048054247], True), ('Convex', [4, 2, 1.477], [0.7749999999999999, 2.8730000262260433, 2.240000024318695], True), ('Fridge', [4.1, 5.42, 1.055], [0.7212619073390969, 0.647375013113022, 2.0340172109603887], True), ('elementF', [4.1, 4.55, 0.55], [0.7364946154356002, 0.718681214511395, 0.918115639448166], True), ('elementG', [4.1, 5.25, 0.55], [0.7364946154356002, 0.7186812145113954, 0.918115639448166], True), ('Dishwasher', [3.85, 3.2, 0.35], [0.6908232375888828, 0.8737302558422089, 0.8339494751691819], True), ('Microwave', [4.0, 2.9, 1.1], [0.5032519983053212, 0.7762125270366669, 0.40027849245071423], False), ('Peach', [0.8, 0.5, 0.9], [0.07489520213007927, 0.07598859867453578, 0.07051610047952273], False), ('Bowl_Target', [1.471, 1.768, 0.94], [0.1842120972871779, 0.1836092998683454, 0.06722269928455349], False), ('Banana', [0.6, 0.6, 0.9], [0.20069698178768158, 0.07860397109389305, 0.040739941686391834], False), ('Bread', [0.7, 0.7, 0.9], [0.09967969664931298, 0.10631950134038926, 0.0566925026497338], False), ('Lemon', [0.8, 0.8, 0.9], [0.06705400063097477, 0.06472199917212129, 0.059596998739521956], False), ('Book_A', [3.9, 4.6, 1.0], [0.27341999387741067, 0.0479999994337561, 0.17450999742746365], False), ('Book_B', [3.9, 4.9, 1.0], [0.27341999387741067, 0.0479999994337561, 0.17450999742746365], False), ('Book_C', [4.2, 0.8, 1.0], [0.2734199938774111, 0.04799999943375588, 0.17450999742746365], False), ('Book_D', [4.2, 0.6, 1.0], [0.2734199938774111, 0.04799999943375588, 0.17450999742746365], False)]
Edge_builder = EdgeBuilder(object_stacking)
Node_builder = NodeBuilder(object_details)
Edge_builder.build_edges()
Edge_builder.normalize_and_weight_edges()
Node_builder.build_nodes()
edges = Edge_builder.get_edges()
nodes = Node_builder.get_nodes()
# 这一部分是根据上述的nodes和edges构建Graph
Graph_Builder = GraphBuilder(nodes, edges)
G = Graph_Builder.build_Graph()
print("Nodes are:", nodes)
print("Edges are:", edges)
print(G)
# 由于node2vec具有随机性 所以执行100次node2vec来统计多次随机下的相似度
all = []
for _ in range(100):
    node2vec = Node2Vec(G, dimensions=32, walk_length=10, num_walks=10, workers=4)
    model = node2vec.fit(window=10, min_count=1, batch_words=4)
    embeddings = {node: model.wv[node] for node in G.nodes()}
# print(embeddings)
    sorted_similarities = Sort_Similarity(embeddings)
# print(sorted_similarities)
    all.append(sorted_similarities)
sum_dict = defaultdict(float)  # 用于存储每个name的float总和
count_dict = defaultdict(int)  # 用于存储每个name出现的次数
for sublist in all:
    for name, value in sublist:
        sum_dict[name] += value
        count_dict[name] += 1
# 计算平均值并存储在字典中
avg_dict = {name: sum_dict[name] / count_dict[name] for name in sum_dict}
# 转换为所需格式并排序
avg_list = sorted(avg_dict.items(), key=lambda x: x[1], reverse=True)

for name, avg_value in avg_list:
    print(f"{name}: {avg_value}")

