# The step2 aims to shinengchang
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
all_boxes_range=[[[4.098999999999999, 5.419, 1.054], [4.101, 5.419, 1.054], [4.101, 5.421, 1.054], [4.098999999999999, 5.421, 1.054], [4.098999999999999, 5.419, 1.0559999999999998], [4.101, 5.419, 1.0559999999999998], [4.101, 5.421, 1.0559999999999998], [4.098999999999999, 5.421, 1.0559999999999998]], [[3.1862777365475883, 5.069626060035825, 0.32445440387725766], [3.833652749660611, 5.069626060035825, 0.32445440387725766], [3.833652749660611, 5.10759665825665, 0.32445440387725766], [3.1862777365475883, 5.10759665825665, 0.32445440387725766], [3.1862777365475883, 5.069626060035825, 1.9208873894214626], [3.833652749660611, 5.069626060035825, 1.9208873894214626], [3.833652749660611, 5.10759665825665, 1.9208873894214626], [3.1862777365475883, 5.10759665825665, 1.9208873894214626]], [[3.211781252744793, 4.954778346326948, 0.9621310020089143], [3.245482742789387, 4.954778346326948, 0.9621310020089143], [3.245482742789387, 4.991910760191083, 0.9621310020089143], [3.211781252744793, 4.991910760191083, 0.9621310020089143], [3.211781252744793, 4.954778346326948, 1.3775105144977564], [3.245482742789387, 4.954778346326948, 1.3775105144977564], [3.245482742789387, 4.991910760191083, 1.3775105144977564], [3.211781252744793, 4.991910760191083, 1.3775105144977564]], [[3.8342374981641765, 5.682189099311828, 0.015757085800170767], [4.409681093573571, 5.682189099311828, 0.015757085800170767], [4.409681093573571, 5.74132460463047, 0.015757085800170767], [3.8342374981641765, 5.74132460463047, 0.015757085800170767], [3.8342374981641765, 5.682189099311828, 2.049774296760559], [4.409681093573571, 5.682189099311828, 2.049774296760559], [4.409681093573571, 5.74132460463047, 2.049774296760559], [3.8342374981641765, 5.74132460463047, 2.049774296760559]], [[3.8342374981641756, 5.095949591517448, 0.015757085800170767], [4.40968109357357, 5.095949591517448, 0.015757085800170767], [4.40968109357357, 5.158115598142147, 0.015757085800170767], [3.8342374981641756, 5.158115598142147, 0.015757085800170767], [3.8342374981641756, 5.095949591517448, 2.049774296760559], [4.40968109357357, 5.095949591517448, 2.049774296760559], [4.40968109357357, 5.158115598142147, 2.049774296760559], [3.8342374981641756, 5.158115598142147, 2.049774296760559]], [[3.834237498164176, 5.135198701739311, 1.8739398140907284], [4.409681093573569, 5.135198701739311, 1.8739398140907284], [4.409681093573569, 5.701363785147667, 1.8739398140907284], [3.834237498164176, 5.701363785147667, 1.8739398140907284], [3.834237498164176, 5.135198701739311, 2.049774296760559], [4.409681093573569, 5.135198701739311, 2.049774296760559], [4.409681093573569, 5.701363785147667, 2.049774296760559], [3.834237498164176, 5.701363785147667, 2.049774296760559]], [[3.834237498164177, 5.135198701739311, 0.015757085800170517], [4.409681093573571, 5.135198701739311, 0.015757085800170517], [4.409681093573571, 5.701363785147667, 0.015757085800170517], [3.834237498164177, 5.701363785147667, 0.015757085800170517], [3.834237498164177, 5.135198701739311, 0.3738451318740845], [4.409681093573571, 5.135198701739311, 0.3738451318740845], [4.409681093573571, 5.701363785147667, 0.3738451318740845], [3.834237498164177, 5.701363785147667, 0.3738451318740845]], [[4.393690905094146, 5.135198701739311, 0.01575708580017121], [4.40968109357357, 5.135198701739311, 0.01575708580017121], [4.40968109357357, 5.701363785147667, 0.01575708580017121], [4.393690905094146, 5.701363785147667, 0.01575708580017121], [4.393690905094146, 5.135198701739311, 2.049774296760559], [4.40968109357357, 5.135198701739311, 2.049774296760559], [4.40968109357357, 5.701363785147667, 2.049774296760559], [4.393690905094146, 5.701363785147667, 2.049774296760559]], [[3.8731993994712823, 5.134198701739311, 0.7832930037975309], [4.400690905094146, 5.134198701739311, 0.7832930037975309], [4.400690905094146, 5.702363785147667, 0.7832930037975309], [3.8731993994712823, 5.702363785147667, 0.7832930037975309], [3.8731993994712823, 5.134198701739311, 0.8234811943173409], [4.400690905094146, 5.134198701739311, 0.8234811943173409], [4.400690905094146, 5.702363785147667, 0.8234811943173409], [3.8731993994712823, 5.702363785147667, 0.8234811943173409]], [[3.873199399471282, 5.134198701739312, 1.3586930910348891], [4.401190314531325, 5.134198701739312, 1.3586930910348891], [4.401190314531325, 5.702930300474167, 1.3586930910348891], [3.873199399471282, 5.702930300474167, 1.3586930910348891], [3.873199399471282, 5.134198701739312, 1.3986151036024093], [4.401190314531325, 5.134198701739312, 1.3986151036024093], [4.401190314531325, 5.702930300474167, 1.3986151036024093], [3.873199399471282, 5.702930300474167, 1.3986151036024093]]]


fig, ax = plt.subplots()

# 定义一个函数来提取在z=0.85平面的边
def get_edges_at_z(box, z_value):
    # 提取每个盒子的底部和顶部角点
    bottom_corners = box[:4]
    top_corners = box[4:]

    # 存储在z=0.85平面上的边
    edges_on_plane = []

    # 检查每一对底部和顶部角点
    for b, t in zip(bottom_corners, top_corners):
        # 如果一个角点在平面下方，另一个在上方，则边与平面相交
        if (b[2] <= z_value and t[2] >= z_value) or (b[2] >= z_value and t[2] <= z_value):
            # 使用线性插值找到交点
            ratio = (z_value - b[2]) / (t[2] - b[2])
            x = b[0] + ratio * (t[0] - b[0])
            y = b[1] + ratio * (t[1] - b[1])
            edges_on_plane.append([x, y])

    return edges_on_plane
all_edges_on_plane = []
# 处理每个盒子并在z=0.85平面绘制边
for box in all_boxes_range:
    edges = get_edges_at_z(box, 0.85)
    if edges:
        # 假设每个盒子在平面上有两条边
        polygon = Polygon(edges, closed=False, edgecolor='r', fill=None)
        ax.add_patch(polygon)
        all_edges_on_plane.append(edges)
print(all_edges_on_plane)
# 在z=0.85平面上添加散点图点（4.2, 5.5）
ax.scatter(4.2, 5.5, color='green')

# 设置图的限制
ax.set_xlim(1, 6)
ax.set_ylim(4, 8)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_title('Z=0.85 touying')

# 展示图表
plt.show()

